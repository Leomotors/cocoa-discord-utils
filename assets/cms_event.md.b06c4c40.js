import{_ as s,c as a,o as e,a as n}from"./app.84f1b8de.js";const h=JSON.parse('{"title":"Event Handler for Management Center","description":"","frontmatter":{},"headers":[{"level":2,"title":"Both Center: \\"error\\"","slug":"both-center-error"},{"level":2,"title":"Message Center: \\"message\\"","slug":"message-center-message"},{"level":2,"title":"Slash Center: \\"interaction\\"","slug":"slash-center-interaction"}],"relativePath":"cms/event.md","lastUpdated":1656256056000}'),o={name:"cms/event.md"},l=n(`<h1 id="event-handler-for-management-center" tabindex="-1">Event Handler for Management Center <a class="header-anchor" href="#event-handler-for-management-center" aria-hidden="true">#</a></h1><h2 id="both-center-error" tabindex="-1">Both Center: &quot;error&quot; <a class="header-anchor" href="#both-center-error" aria-hidden="true">#</a></h2><p>You can add a event listener to the Management Center.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// This one is Message Center, Slash Center is slightly different</span></span>
<span class="line"><span style="color:#A6ACCD;">center</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">chalk</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">red</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Command </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> just error!</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">channel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Oops! This error occured: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Note that you don&#39;t need to care if msg.channel.send will cause error</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Command Center will handle error from error handler as long as you \`await\`</span></span>
<span class="line"></span></code></pre></div><p>Everytime an error occured in your command, this callback function will be called.</p><p>Use case is the case given above, the bot can reply to the user telling them directly what happened. So you don&#39;t need to check terminal to investigate.</p><p>The error handler is under try catch, as long as you await the potential harmful async function. It will be fine. Please note that we don&#39;t provide <code>on error error</code> event handler. That is too much.</p><p><strong>Tips</strong>: It is always best practice to use <code>await</code> on every expression that is async including <code>message.reply</code> <code>message.channel.send</code> <code>ctx.reply</code> etc.</p><p>Otherwise, the try-catch might not be able to catch and your bot will <em>boom</em></p><h2 id="message-center-message" tabindex="-1">Message Center: &quot;message&quot; <a class="header-anchor" href="#message-center-message" aria-hidden="true">#</a></h2><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">center</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// do smth</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>This will be call after a message is handled by command if it exists. Otherwise after it has been checked that this command does not exist.</p><p><code>name</code> - The name of function handled, Empty String if is not handled (Not a command).</p><p><code>msg</code> - Original Message Unmodified</p><h2 id="slash-center-interaction" tabindex="-1">Slash Center: &quot;interaction&quot; <a class="header-anchor" href="#slash-center-interaction" aria-hidden="true">#</a></h2><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">center</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">interaction</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// do smth</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>This will be call only if and after interaction is handled by command (which in normal situation, <em>always</em>)</p>`,17),t=[l];function p(r,c,i,y,D,F){return e(),a("div",null,t)}var C=s(o,[["render",p]]);export{h as __pageData,C as default};
