import{_ as s,c as a,o as n,a as o}from"./app.f0406a77.js";const F=JSON.parse('{"title":"Command Management System","description":"","frontmatter":{},"headers":[{"level":2,"title":"Table of Contents","slug":"table-of-contents"},{"level":2,"title":"Prerequisite","slug":"prerequisite"},{"level":2,"title":"How it works","slug":"how-it-works"},{"level":3,"title":"Message Command","slug":"message-command"},{"level":3,"title":"Slash Command","slug":"slash-command"},{"level":2,"title":"The Cog Concept","slug":"the-cog-concept"},{"level":2,"title":"Object Cog","slug":"object-cog"},{"level":3,"title":"Create a Command","slug":"create-a-command"},{"level":3,"title":"Create a Cog","slug":"create-a-cog"},{"level":3,"title":"Slash Command Center","slug":"slash-command-center"},{"level":2,"title":"Introduction to Class Cog","slug":"introduction-to-class-cog"},{"level":3,"title":"The Syntax","slug":"the-syntax"},{"level":2,"title":"Class Cog V1","slug":"class-cog-v1"},{"level":2,"title":"Miscellanous","slug":"miscellanous"}],"relativePath":"cms/basic.md","lastUpdated":1658151684000}'),e={name:"cms/basic.md"},l=o(`<h1 id="command-management-system" tabindex="-1">Command Management System <a class="header-anchor" href="#command-management-system" aria-hidden="true">#</a></h1><p>The core of discord bots are command.</p><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a></h2><nav class="table-of-contents"><ul><li><a href="#table-of-contents">Table of Contents</a></li><li><a href="#prerequisite">Prerequisite</a></li><li><a href="#how-it-works">How it works</a><ul><li><a href="#message-command">Message Command</a></li><li><a href="#slash-command">Slash Command</a></li></ul></li><li><a href="#the-cog-concept">The Cog Concept</a></li><li><a href="#object-cog">Object Cog</a><ul><li><a href="#create-a-command">Create a Command</a></li><li><a href="#create-a-cog">Create a Cog</a></li><li><a href="#slash-command-center">Slash Command Center</a></li></ul></li><li><a href="#introduction-to-class-cog">Introduction to Class Cog</a><ul><li><a href="#the-syntax">The Syntax</a></li></ul></li><li><a href="#class-cog-v1">Class Cog V1</a></li><li><a href="#miscellanous">Miscellanous</a></li></ul></nav><h2 id="prerequisite" tabindex="-1">Prerequisite <a class="header-anchor" href="#prerequisite" aria-hidden="true">#</a></h2><p>To understand this guide, you need to know:</p><ul><li><p>discord.js</p></li><li><p>SlashCommandBuilder (@discordjs/builders) or JSON Structure of Slash Command</p></li></ul><h2 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a></h2><h3 id="message-command" tabindex="-1">Message Command <a class="header-anchor" href="#message-command" aria-hidden="true">#</a></h3><p>Message Commands are very simple, so simple that we will talk about it next section.<br> It basically recieve messages, process it by doing some actions and done.</p><h3 id="slash-command" tabindex="-1">Slash Command <a class="header-anchor" href="#slash-command" aria-hidden="true">#</a></h3><p>On the other hand, slash commands are more complex than message.</p><p>Slash Command has 2 parts, the command data and how we handle it.</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> command </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ping</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">description</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ping the Bot!</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>The <code>command</code> object describe the command, this then need to be sent to discord, so that they recognize our command and register them for user.</p><p>Note that apart from writing the pure JSON, <code>discord.js</code> provides <code>SlashCommandBuilder</code> to help simplify things, the equivalent to above commands would be</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SlashCommandBuilder</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ping</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDescription</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ping the Bot!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toJSON</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>Then, on <code>interactionCreate</code> the event is sent to our bot that is running and we handle them.</p><p>So, preliminary concept is to create an object that contain both the slash command definition and the handler of the command.<br> And then create a library that organize and handle the sync and the interaction.<br> So that, we can focus on writing only the command.</p><h2 id="the-cog-concept" tabindex="-1">The Cog Concept <a class="header-anchor" href="#the-cog-concept" aria-hidden="true">#</a></h2><p>The Command Management System in this library is inspired by <a href="http://discord.py" target="_blank" rel="noopener noreferrer">discord.py</a>&#39;s cog system. It is similar but not identical to.</p><p>For this library, the Cog is a collection of Commands, usally categorized, and one bot may run multiple Cogs.</p><h2 id="object-cog" tabindex="-1">Object Cog <a class="header-anchor" href="#object-cog" aria-hidden="true">#</a></h2><p>This is the preliminary approaches to this library. Focuses on concept of &#39;one file per command&#39; (you can actually put multiple if you want so)</p><h3 id="create-a-command" tabindex="-1">Create a Command <a class="header-anchor" href="#create-a-command" aria-hidden="true">#</a></h3><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ping</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CocoaSlash</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">command</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CocoaBuilderFull</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ping</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pong!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toJSON</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pong!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>Note</strong>: CocoaBuilderFull is a utility function that returns SlashCommandBuilder</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">CocoaBuilderFull</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ping</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pong!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Returns</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SlashCommandBuilder</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ping</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDescription</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pong!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// You can continue extend the SlashCommandBuilder normally</span></span>
<span class="line"></span></code></pre></div><p>The goal of this function is to reduce the amount of frequently used code.</p><p><strong>Remark</strong>:</p><ul><li><p>Cocoa Discord Utils does not provide Slash Command Builder, you will need to use <code>SlashCommandBuilder</code> from <code>discord.js</code> or <code>CocoaBuilder</code> that will eventually returns <code>SlashCommandBuilder</code></p></li><li><p>Please refer to <code>discord.js</code> documents on how to handle interaction</p></li></ul><p>Also, please keep in mind that this package is utility and not framework.</p><p><s>Because I ever made a framework that is easy to implement and it ends up being a garbage. Visit <a href="https://www.npmjs.com/package/s-bot-framework" target="_blank" rel="noopener noreferrer">here</a></s></p><h3 id="create-a-cog" tabindex="-1">Create a Cog <a class="header-anchor" href="#create-a-cog" aria-hidden="true">#</a></h3><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> mainCog</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CogSlash</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Main Cog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">description</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is the main cog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">commands</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        ping</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>As we have stated earlier, the Cog is collection of commands</p><p><strong>Note</strong>: The key of <code>commands</code> must match the name of its command in SlashCommandBuilder. In order to ensure this, you are encouraged to run a function which will be mentioned in the next section.</p><h3 id="slash-command-center" tabindex="-1">Slash Command Center <a class="header-anchor" href="#slash-command-center" aria-hidden="true">#</a></h3><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> center </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SlashCenter</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    client</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">GUILD_IDS</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// addCog for adding 1 Cog, addCogs for multiple Cogs</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// However, addCogs also works on adding 1 Cog</span></span>
<span class="line"><span style="color:#A6ACCD;">center</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addCogs</span><span style="color:#A6ACCD;">(mainCog)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">center</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">validateCommands</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><code>SlashCenter.validateCommands()</code> need to be called after all cogs are added to ensure that the condition mentioned above is met.</p><h2 id="introduction-to-class-cog" tabindex="-1">Introduction to Class Cog <a class="header-anchor" href="#introduction-to-class-cog" aria-hidden="true">#</a></h2><p>As the complexity of the projects grow, I were looking for more simple syntax and come up with the Class Cog syntax.</p><p><strong>Note</strong>: The Class Syntax (Both V1 and V2 that I will talk about it soon) will eventually compiled down to Object Cog.</p><ul><li>The only bot that still use <em>pure</em> Object Cog is <a href="https://github.com/Leomotors/cocoa-grader" target="_blank" rel="noopener noreferrer">Cocoa Grader</a></li></ul><h3 id="the-syntax" tabindex="-1">The Syntax <a class="header-anchor" href="#the-syntax" aria-hidden="true">#</a></h3><p><em>This syntax is inspired by <a href="http://discord.py" target="_blank" rel="noopener noreferrer">discord.py</a></em></p><h2 id="class-cog-v1" tabindex="-1">Class Cog V1 <a class="header-anchor" href="#class-cog-v1" aria-hidden="true">#</a></h2><p><em>Note</em>: The following syntax will still be available in Version 2, but it is recommended to use newer syntax where possible.</p><p><strong>To use Class Cog</strong>, We will need to extend the base class given, and implement methods/commands with decorator.</p><p>The <code>CogClass</code> are based on Object Cog, so we can add it to management center in the <s>same</s> similar way as the Object Cog.</p><p><em>Definition for <code>CogSlashClass</code></em></p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CogSlashClass</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CogSlash</span></span>
<span class="line"></span></code></pre></div><p>The approach of Class Cog is very similar to Object Cog. You basically define the command handler as the method in a class. And slap the decorator with has the command definition object. Just see it with your eye.</p><p><strong>Example of Class Cog</strong></p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MainCog</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CogSlashClass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Main Cog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is the main cog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Normal Way</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">SlashCommand</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">CocoaBuilderFull</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ping</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pong!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toJSON</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">ping</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ChatInputCommandInteraction</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pong!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// CocoaBuilderFull was named CocoaBuilder</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// NEW!</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">SlashCommand</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">CocoaBuilder</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pong!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">ping</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ChatInputCommandInteraction</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// With CocoaBuilder (Old name: AutoBuilder), you can omit the name field,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// it will take the name from the method name</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// From 1.2.0, with CogSlashClass, you can omit .toJSON()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Always note that there is limitation on how you can name command</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// But discord.js will throw error at start time, so nothing to worry about</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>The library will automatically bind your method to an instance, so you can use it like a class. Like, add some methods or properties!</p><p>And to add it to Slash Center just like Object Cog</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">center</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addCogs</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MainCog</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Because CogSlashClass implements CogSlash, we can add it to Slash Center and even mix it with Object Cog.</p><p><strong>Note</strong>: Due to some TypeScript mumbo jumbo, you are required to explicitly specify type in your method arguments.</p><p><em>Argument Name can be changed, but must specify the correct type</em></p><p><strong>Warning</strong>: Extending Cog Class is not supported, decorators may behave unexpectly</p><h2 id="miscellanous" tabindex="-1">Miscellanous <a class="header-anchor" href="#miscellanous" aria-hidden="true">#</a></h2><p>Syncing Commands: Your slash comamnd may not update when you only change fields such as localizations or permissions, those are not supported and never in consideration</p>`,64),p=[l];function t(c,r,i,y,D,C){return n(),a("div",null,p)}var h=s(e,[["render",t]]);export{F as __pageData,h as default};
